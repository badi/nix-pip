* Status

  Under development, *unstable*

* Goal

  Automatically and painlessly (as possible) derive Nix package sets
  for python dependencies.

* Features

  - Determine dependency graph of python packages
  - Cache graphs between runs
  - Settings read from configuration file (eg: see [[file:.nix-pip.rc][.nix-pip.rc]])

    The settings file should have three sections

    - =requirements=
    - =setup_requires=
    - =build_inputs=

    If these are not set a default empty configuration is used.

    *requirements*

    - inputs: a list of pip requirements files to read
      eg:

      #+BEGIN_SRC yaml
      - requirements.txt
      - requirements-test.txt
      #+END_SRC

      - output: the output file to generate
        default: =requirements.nix=

      - packages: list of extra python package requirements
        eg:

        #+BEGIN_SRC yaml
        - requests
        - vcversioner==2.16.0.0
        #+END_SRC

    *setup_requires* and *build_inputs*

    These sections are a mapping from package name to any requirements
    needed to install and build (respectively) the package.

    For instance:

    #+BEGIN_SRC yaml
      setup_requires:
        munch:
          - six

      build_inputs:
        pygraphviz:
          - graphviz
          - pkgconfig
        pyyaml:
          - libyaml
    #+END_SRC


    The ``build_inputs`` entries map a python package name to the Nix
    derivation names relative the top level of the Nix packge set.


* Examples

  =nix-pip= uses itself to manage dependencies.  See for instance
  [[file:.nix-pip.rc][.nix-pip.rc]] for current settings.  When installing (see [[file:Makefile][make
  install]]) or entering a shell (=nix-shell=), the requirements are
  read from [[file:requirements.open][requirements.open]] (usually processed by =pip install -r=)
  and the corresponding derivation looked up in [[file:requirements.nix][requirements.nix]] to
  build the python interpreter. See [[file:default.nix][default.nix]] for details on how
  this is done. =nix-pip= is used to generate =requirements.nix=.

* Installation

  1. Clone this repository:

     #+BEGIN_EXAMPLE
     $ git clone git://github.com/badi/nix-pip
     $ cd nix-pip
     #+END_EXAMPLE

  2. Install using =nix-env=

     #+BEGIN_EXAMPLE
     $ nix-env -f . -i
     #+END_EXAMPLE

* Usage

  - =nixpip -r requirements.txt= uses the requirements specified in the given file
  - =nixpip -p foo -p bar= will generate requirement sets to allow
    installation of packages =foo= and =bar=
  - =nixpip -p foo -s cryptography packaging -i cryptography openssl
    -i cffi libffi= This generates derivations for =foo= and it's
    dependencies. Two of the depencencies are =cryptography= and
    =cffi= which respectively depend on =openssl= and =libffi=.

  This will generate =requirements.nix= and =nixpip.nix=

  In your =default.nix= or =shell.nix= you can import the appropriate
  python interpreter or package sets by loading the generated
  =nixpip.nix=:

  #+BEGIN_SRC nix
    nixpip = callPackage ./nixpip.nix { reqs = ./requirements.txt; };
  #+END_SRC

  This will find the appropriate derivation in =requirements.nix=
  based on package names in =requirements.txt=.

  You can then use =nixpip.requirements.reqs= or =nixpip.python.reqs=
  to refer to the list of derivations for the =reqs= requirements or a
  derivation for a python interpreter having those requirements.

  You can provide several different requirement sets to =nixpip.nix=.

  #+BEGIN_SRC nix
    foo = callPackage ./nixpip.nix {
      production = ./requirements.txt;
      docs = ./requirements-docs.txt;
      testing = ./requirements-test.txt;
    }
  #+END_SRC

  so that =foo.{requirements|python}.{production|docs|testing}= are
  the corresponding requirement sets and interpreters. Additionally,
  there is a =all= attribute that would include the entire set of
  requirements:

  - =foo.requirements.all=
  - =foo.python.all=


* Assumptions

  This is intended to be used for projects which can already be
  installed using =pip=.

* Requirements

  - Python
    See [[file:requirements.open][requirements.open]] for the python dependencies
  - Nix+Nixpkgs
    See [[file:nixpip/data/nixpkgs.nix][nixpkgs.nix]]

* Procedure

  1. Determine package dependency graph by using =pip install= in a
     bare python environment and pruning child dependencies to
     determine transitive dependencies.
  2. Query the PyPi api for each package and pin to the frozen version.
  3. Generate the Nix derivation set
